3. 创建空的build.gradle文件
4. 现在开始从pom.xml中将每个组件转换为build.gradle文件。
5. 由于它是一个Spring MVC Web应用程序，我们需要创建WAR文件。
所以请apply war plugin,并定义war属性，还提供war文件名及其版本。

    apply plugin: "war"
    war {
        baseName = 'SpringMVCExample'
        version = '1.0.0-BUILD-SNAPSHOT'
    }

6. 添加Spring Dependencies:

    dependencies {
        compile("org.springframework:spring-context:4.0.0.RELEASE")
        compile("org.springframework:spring-webmvc:4.0.0.RELEASE")
        compile("org.aspectj:aspectjrt:1.7.4")
    }

7. 添加我们的其他应用程序依赖项:

    dependencies {
        compile("javax.inject:javax.inject:1")
        compile("javax.servlet:servlet-api:2.5")
        compile("javax.servlet:jstl:2.5")
        compile("javax.servlet.jsp:jsp-api:1.2")	
        compile("org.slf4j:slf4j-api:1.7.5")
        compile("org.slf4j:jcl-over-slf4j:1.7.5")
        compile("org.slf4j:slf4j-log4j12:1.7.5")
        compile("log4j:log4j:1.2.15")
    }

8. 添加我们的Application Unit Test依赖:

    dependencies {
        testCompile("junit:junit:4.7") 
    }

9. 我们使用“compile()” element来添加依赖:

    compile("org.springframework:spring-context:4.0.0.RELEASE")

10. 我们使用“providedRuntime()” element在runtime添加依赖:

    providedRuntime("javax.servlet:jstl:2.5")

11. 我们使用“testCompile()” element来添加仅运行单元测试的依赖项

    testCompile("junit:junit:4.7")

12. 我们的应用程序的全部依赖项:

    dependencies {
        compile("org.springframework:spring-context:4.0.0.RELEASE")
        compile("org.springframework:spring-webmvc:4.0.0.RELEASE")
        compile("org.aspectj:aspectjrt:1.7.4")

        compile("javax.inject:javax.inject:1")
        compile("javax.servlet:servlet-api:2.5")
        compile("javax.servlet:jstl:2.5")
        compile("javax.servlet.jsp:jsp-api:1.2")	
        compile("org.slf4j:slf4j-api:1.7.5")
        compile("org.slf4j:jcl-over-slf4j:1.7.5")
        compile("org.slf4j:slf4j-log4j12:1.7.5")
        compile("log4j:log4j:1.2.15")

        testCompile("junit:junit:4.7") 
    }

13. 在Project Root Directory中打开命令提示符以执行gradle命令：

14. 现在通过执行以下gradle命令来构建war文件:

    gradle clean
    gradle build

15. 或者使用以下语法一次执行两个命令,它类似于执行Maven命令:

    gradle clean build

16. 我总是建议每个人在构建我们的application之前都使用“clean”命令, 它clean我们的
旧构建的东西，编译并创建新的WAR/JAR文件

17. 观察我们新创建的war文件: ${PROJECT_ROOT_DIR}/build/libs/文件夹

18. 使用build.gradle文件中given name and Version创建war文件:
SpringMVCExample-1.0.0-BUILD-SNAPSHOT.war
